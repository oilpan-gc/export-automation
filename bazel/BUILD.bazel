load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")

config_setting(
    name = "linux_x86_64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

config_setting(
    name = "macos_x86_64",
    constraint_values = [
        "@platforms//os:macos",
        "@platforms//cpu:x86_64",
    ],
)

config_setting(
    name = "macos_arm64",
    constraint_values = [
        "@platforms//os:macos",
        "@platforms//cpu:arm64",
    ],
)

config_setting(
    name = "is_debug",
    values = {
        "compilation_mode": "dbg",
    },
)

# TODO: Support all the platforms v8 does.
PLATFORM_SRCS = select({
  ":linux_x86_64": [
    "src/base/platform/platform-posix.cc",
    "src/base/platform/platform-posix.h",
    "src/base/platform/platform-posix-time.cc",
    "src/base/platform/platform-posix-time.h",
    "src/base/debug/stack_trace_posix.cc",
    "src/base/platform/platform-linux.h",
    "src/base/platform/platform-linux.cc",
    "src/heap/base/asm/x64/push_registers_asm.cc",
  ],
  ":macos_x86_64": [
    "src/base/platform/platform-posix.cc",
    "src/base/platform/platform-posix.h",
    "src/base/platform/platform-posix-time.cc",
    "src/base/platform/platform-posix-time.h",
    "src/base/debug/stack_trace_posix.cc",
    "src/base/platform/platform-darwin.cc",
    "src/base/platform/platform-macos.cc",
    "src/heap/base/asm/x64/push_registers_asm.cc",
  ],
  ":macos_arm64": [
    "src/base/platform/platform-posix.cc",
    "src/base/platform/platform-posix.h",
    "src/base/platform/platform-posix-time.cc",
    "src/base/platform/platform-posix-time.h",
    "src/base/debug/stack_trace_posix.cc",
    "src/base/platform/platform-darwin.cc",
    "src/base/platform/platform-macos.cc",
    "src/heap/base/asm/arm64/push_registers_asm.cc",
  ],
})

SHARED_DEFINES = [
    "CPPGC_IS_STANDALONE",
    # TODO(crbug.com/1325007): Enable -DCPPGC_POINTER_COMPRESSION when ready (requires caged heap)
]

PLATFORM_DEFINES = select({
  ":linux_x86_64": [
    "CPPGC_CAGED_HEAP",
    "CPPGC_YOUNG_GENERATION",
  ],
  ":macos_x86_64": [
    "CPPGC_CAGED_HEAP",
    "CPPGC_YOUNG_GENERATION",
  ],
  ":macos_arm64": [
    "CPPGC_CAGED_HEAP",
    "CPPGC_YOUNG_GENERATION",
  ],
})

PLATFORM_LINKOPTS = select({
  ":linux_x86_64": [
    "-lpthread",
  ],
  ":macos_x86_64": [
    "-lpthread",
  ],
  ":macos_arm64": [
    "-lpthread",
  ],
})

DEBUG_COPTS = select({
  ":is_debug": [
    "-DCPPGC_ENABLE_VERIFY_HEAP"
  ],
  "//conditions:default": []
})

cc_library(
  name = "cppgc",
  hdrs = glob(["include/**/*.h"]),
  strip_include_prefix = "include",
  srcs = glob(
    [
      "src/**/*.h",
      "src/**/*.cc",
    ],
    exclude = [
      "src/base/win32-headers.h",
      "src/base/platform/platform-*.cc",
      "src/base/platform/platform-*.h",
      "src/libplatform/tracing/recorder-*.cc",
      "src/libplatform/tracing/recorder.h",
      "src/libplatform/tracing/trace-event-listener.h",
      "src/libplatform/tracing/trace-event-listener.cc",
      "src/base/debug/stack_trace_*.cc",
      "src/base/ubsan.cc",
      "src/heap/base/asm/**/*.cc",
    ]
  ) + PLATFORM_SRCS,
  # TODO: Enforce -std=c++17
  copts = DEBUG_COPTS,
  defines = SHARED_DEFINES + PLATFORM_DEFINES,
  linkopts = PLATFORM_LINKOPTS,
  deps = [
    "@com_google_googletest//:gtest_prod",
  ],
  visibility = ["//visibility:public"],
)

cc_binary(
  name = "cppgc_sample",
  srcs = ["samples/cppgc/hello-world.cc"],
  deps = [":cppgc"]
)

cc_test(
  name = "cppgc_tests",
  srcs = glob([
    "test/unittests/heap/cppgc/*.h",
    "test/unittests/heap/cppgc/*.cc",
  ]),
  copts = DEBUG_COPTS,
  linkopts = PLATFORM_LINKOPTS,
  deps = [
    ":cppgc",
    "@com_google_googletest//:gtest",
  ],
)

